/**
 * Document Processing API
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * 
 * @author crosser.software
 * @version 1.0.0
 */

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
const SUPPORTED_TYPES = {
  'text/plain': 'txt',
  'application/pdf': 'pdf',
  'application/msword': 'doc',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',
  'application/rtf': 'rtf',
  'text/rtf': 'rtf'
};

const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10 –ú–ë

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
const RETRY_CONFIG = {
  MAX_RETRIES: 5,
  ENABLE_AGGRESSIVE_RETRY: true,
  MAX_DELAY: 16000, // 16 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
  BASE_DELAY: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤ production —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const processingTasks = new Map();

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { action } = req.query;

  try {
    switch (action) {
      case 'upload':
        return handleFileUpload(req, res);
      case 'process':
        return handleDocumentProcessing(req, res);
      case 'status':
        return handleTaskStatus(req, res);
      case 'download':
        return handleDownload(req, res);
      default:
        return res.status(400).json({
          error: 'Invalid action',
          message: 'Supported actions: upload, process, status, download'
        });
    }
  } catch (error) {
    console.error('Document API error:', error);
    return res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
 */
async function handleFileUpload(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ multipart/form-data
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
  const mockFileId = 'file_' + Math.random().toString(36).substr(2, 16);
  
  return res.status(200).json({
    success: true,
    fileId: mockFileId,
    message: 'File uploaded successfully'
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
async function handleDocumentProcessing(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { fileId, sourceLang, targetLangs, fileName, fileSize } = req.body;

  if (!fileId || !targetLangs || !Array.isArray(targetLangs)) {
    return res.status(400).json({
      error: 'Missing required parameters',
      message: 'fileId and targetLangs are required'
    });
  }

  // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const taskId = 'task_' + Math.random().toString(36).substr(2, 16);
  const task = {
    id: taskId,
    fileId,
    fileName: fileName || 'document.txt',
    fileSize: fileSize || 0,
    sourceLang: sourceLang || 'AUTO',
    targetLangs,
    status: 'pending',
    progress: 0,
    createdAt: Date.now(),
    results: []
  };

  processingTasks.set(taskId, task);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  processDocumentAsync(taskId);

  console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${taskId}`);

  return res.status(200).json({
    success: true,
    taskId,
    message: 'Document processing started'
  });
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function handleTaskStatus(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { taskId } = req.query;

  if (!taskId) {
    return res.status(400).json({
      error: 'Missing taskId parameter'
    });
  }

  const task = processingTasks.get(taskId);

  if (!task) {
    return res.status(404).json({
      error: 'Task not found'
    });
  }

  return res.status(200).json({
    success: true,
    task: {
      id: task.id,
      fileName: task.fileName,
      status: task.status,
      progress: task.progress,
      targetLangs: task.targetLangs,
      results: task.results,
      error: task.error
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
async function handleDownload(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { taskId, langCode } = req.query;

  if (!taskId || !langCode) {
    return res.status(400).json({
      error: 'Missing required parameters',
      message: 'taskId and langCode are required'
    });
  }

  const task = processingTasks.get(taskId);

  if (!task) {
    return res.status(404).json({
      error: 'Task not found'
    });
  }

  const result = task.results.find(r => r.langCode === langCode);

  if (!result || result.status !== 'completed') {
    return res.status(404).json({
      error: 'Translation not found or not completed'
    });
  }

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const fileContent = await generateDownloadContent(task, result);
    const fileName = generateFileName(task.fileName, langCode);
    
    console.log(`üìÅ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞: "${task.fileName}" ‚Üí "${fileName}"`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.setHeader('Content-Disposition', buildContentDisposition(fileName));
    res.setHeader('Cache-Control', 'no-cache');
    
    console.log(`‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: ${fileName} (${fileContent.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    return res.status(200).send(fileContent);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
    console.error('üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:', { 
      taskId, 
      langCode, 
      fileName: task?.fileName,
      resultStatus: result?.status 
    });
    
    return res.status(500).json({
      error: 'Download generation failed',
      message: error.message
    });
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 */
async function generateDownloadContent(task, result) {
  const originalFileName = task.fileName || 'document.txt';
  const langName = getLanguageName(result.langCode);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
  let translatedContent = result.translatedText;
  
  if (!translatedContent) {
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    translatedContent = await generateDemoTranslatedContent(result.langCode);
  }
  
  return `${translatedContent}

---
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ:
–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${originalFileName}
–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: ${langName} (${result.langCode})
–î–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${new Date().toLocaleString('ru-RU')}
ID –∑–∞–¥–∞—á–∏: ${task.id}
---`;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 */
async function generateDemoTranslatedContent(langCode) {
  const demoTexts = {
    // –°–ª–∞–≤—è–Ω—Å–∫–∏–µ —è–∑—ã–∫–∏
    'BG': '–¢–æ–≤–∞ –µ –ø—Ä–∏–º–µ—Ä –∑–∞ –ø—Ä–µ–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç –∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –∑–∞ –ø—Ä–µ–≤–æ–¥ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏. –í —Ä–µ–∞–ª–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—É–∫ —â–µ –±—ä–¥–µ –ø—ä–ª–Ω–æ—Ç–æ –ø—Ä–µ–≤–µ–¥–µ–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.',
    'CS': 'Toto je p≈ô√≠klad p≈ôelo≈æen√©ho textu pro demonstraci funkƒçnosti syst√©mu p≈ôekladu dokument≈Ø. V re√°ln√© aplikaci by zde byl √∫pln√Ω p≈ôelo≈æen√Ω obsah dokumentu.',
    'PL': 'To jest przyk≈Çad przet≈Çumaczonego tekstu w celu zademonstrowania funkcjonalno≈õci systemu t≈Çumaczenia dokument√≥w. W rzeczywistej aplikacji znajdowa≈Çaby siƒô tutaj pe≈Çna przet≈Çumaczona zawarto≈õƒá dokumentu.',
    'RU': '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.',
    'SK': 'Toto je pr√≠klad prelo≈æen√©ho textu na demon≈°tr√°ciu funkƒçnosti syst√©mu prekladu dokumentov. V skutoƒçnej aplik√°cii by tu bol √∫pln√Ω prelo≈æen√Ω obsah dokumentu.',
    'SL': 'To je primer prevedenega besedila za predstavitev funkcionalnosti sistema za prevajanje dokumentov. V pravi aplikaciji bi bila tukaj celotna prevedena vsebina dokumenta.',
    'UK': '–¶–µ –ø—Ä–∏–∫–ª–∞–¥ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –£ —Ä–µ–∞–ª—å–Ω—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ —Ç—É—Ç –±—É–≤ –±–∏ –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π –≤–º—ñ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.',
    
    // –ì–µ—Ä–º–∞–Ω—Å–∫–∏–µ —è–∑—ã–∫–∏
    'DE': 'Dies ist ein Beispiel f√ºr √ºbersetzten Text zur Demonstration der Funktionalit√§t des Dokumenten√ºbersetzungssystems. In einer echten Anwendung w√§re hier der vollst√§ndige √ºbersetzte Inhalt des Dokuments.',
    'EN': 'This is an example of translated text to demonstrate the functionality of the document translation system. In a real application, the complete translated content of the document would be here.',
    'NL': 'Dit is een voorbeeld van vertaalde tekst ter demonstratie van de functionaliteit van het documentvertaalsysteem. In een echte applicatie zou hier de volledige vertaalde inhoud van het document staan.',
    'SV': 'Detta √§r ett exempel p√• √∂versatt text f√∂r att demonstrera funktionaliteten hos dokument√∂vers√§ttningssystemet. I en riktig applikation skulle det fullst√§ndiga √∂versatta inneh√•llet i dokumentet finnas h√§r.',
    'DA': 'Dette er et eksempel p√• oversat tekst for at demonstrere funktionaliteten af dokumentovers√¶ttelsessystemet. I en rigtig applikation ville det komplette oversatte indhold af dokumentet v√¶re her.',
    'NB': 'Dette er et eksempel p√• oversatt tekst for √• demonstrere funksjonaliteten til dokumentoversettelsessystemet. I en ekte applikasjon ville det fullstendige oversatte innholdet i dokumentet v√¶re her.',
    
    // –†–æ–º–∞–Ω—Å–∫–∏–µ —è–∑—ã–∫–∏
    'FR': 'Ceci est un exemple de texte traduit pour d√©montrer la fonctionnalit√© du syst√®me de traduction de documents. Dans une vraie application, le contenu traduit complet du document serait ici.',
    'ES': 'Este es un ejemplo de texto traducido para demostrar la funcionalidad del sistema de traducci√≥n de documentos. En una aplicaci√≥n real, aqu√≠ estar√≠a el contenido traducido completo del documento.',
    'IT': 'Questo √® un esempio di testo tradotto per dimostrare la funzionalit√† del sistema di traduzione dei documenti. In una vera applicazione, qui ci sarebbe il contenuto tradotto completo del documento.',
    'PT': 'Este √© um exemplo de texto traduzido para demonstrar a funcionalidade do sistema de tradu√ß√£o de documentos. Em uma aplica√ß√£o real, o conte√∫do traduzido completo do documento estaria aqui.',
    'RO': 'Acesta este un exemplu de text tradus pentru a demonstra func»õionalitatea sistemului de traducere a documentelor. √éntr-o aplica»õie realƒÉ, con»õinutul tradus complet al documentului ar fi aici.',
    
    // –î—Ä—É–≥–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —è–∑—ã–∫–∏
    'EL': 'ŒëœÖœÑœå ŒµŒØŒΩŒ±Œπ Œ≠ŒΩŒ± œÄŒ±œÅŒ¨Œ¥ŒµŒπŒ≥ŒºŒ± ŒºŒµœÑŒ±œÜœÅŒ±œÉŒºŒ≠ŒΩŒøœÖ Œ∫ŒµŒπŒºŒ≠ŒΩŒøœÖ Œ≥ŒπŒ± œÑŒ∑ŒΩ ŒµœÄŒØŒ¥ŒµŒπŒæŒ∑ œÑŒ∑œÇ ŒªŒµŒπœÑŒøœÖœÅŒ≥ŒπŒ∫œåœÑŒ∑œÑŒ±œÇ œÑŒøœÖ œÉœÖœÉœÑŒÆŒºŒ±œÑŒøœÇ ŒºŒµœÑŒ¨œÜœÅŒ±œÉŒ∑œÇ ŒµŒ≥Œ≥œÅŒ¨œÜœâŒΩ. Œ£Œµ ŒºŒπŒ± œÄœÅŒ±Œ≥ŒºŒ±œÑŒπŒ∫ŒÆ ŒµœÜŒ±œÅŒºŒøŒ≥ŒÆ, œÑŒø œÄŒªŒÆœÅŒµœÇ ŒºŒµœÑŒ±œÜœÅŒ±œÉŒºŒ≠ŒΩŒø œÄŒµœÅŒπŒµœáœåŒºŒµŒΩŒø œÑŒøœÖ ŒµŒ≥Œ≥œÅŒ¨œÜŒøœÖ Œ∏Œ± ŒÆœÑŒ±ŒΩ ŒµŒ¥œé.',
    'HU': 'Ez egy p√©lda leford√≠tott sz√∂vegre a dokumentumford√≠t√≥ rendszer funkcionalit√°s√°nak bemutat√°s√°ra. Egy val√≥di alkalmaz√°sban a dokumentum teljes leford√≠tott tartalma lenne itt.',
    'FI': 'T√§m√§ on esimerkki k√§√§nnetyst√§ tekstist√§ dokumenttien k√§√§nn√∂sj√§rjestelm√§n toiminnallisuuden esittelemiseksi. Todellisessa sovelluksessa t√§ss√§ olisi asiakirjan t√§ydellinen k√§√§nnetty sis√§lt√∂.',
    'ET': 'See on n√§ide t√µlgitud tekstist, et n√§idata dokumentide t√µlkes√ºsteemi funktsionaalsust. Tegelikus rakenduses oleks siin dokumendi t√§ielik t√µlgitud sisu.',
    'LT': 'Tai yra i≈°versto teksto pavyzdys, skirtas pademonstruoti dokument≈≥ vertimo sistemos funkcionalumƒÖ. Tikroje programoje ƒçia b≈´t≈≥ visas i≈°verstas dokumento turinys.',
    'LV': '≈†is ir tulkota teksta piemƒìrs, lai demonstrƒìtu dokumentu tulko≈°anas sistƒìmas funkcionalitƒÅti. ƒ™stƒÅ lietojumprogrammƒÅ ≈°eit b≈´tu pilns tulkotais dokumenta saturs.',
    
    // –ê–∑–∏–∞—Ç—Å–∫–∏–µ —è–∑—ã–∫–∏
    'ZH': 'ËøôÊòØÁøªËØëÊñáÊú¨ÁöÑÁ§∫‰æãÔºåÁî®‰∫éÊºîÁ§∫ÊñáÊ°£ÁøªËØëÁ≥ªÁªüÁöÑÂäüËÉΩ„ÄÇÂú®ÁúüÊ≠£ÁöÑÂ∫îÁî®Á®ãÂ∫è‰∏≠ÔºåËøôÈáåÂ∞ÜÊòØÊñáÊ°£ÁöÑÂÆåÊï¥ÁøªËØëÂÜÖÂÆπ„ÄÇ',
    'JA': '„Åì„Çå„ÅØ„ÄÅÊñáÊõ∏ÁøªË®≥„Ç∑„Çπ„ÉÜ„É†„ÅÆÊ©üËÉΩ„ÇíÂÆüË®º„Åô„Çã„Åü„ÇÅ„ÅÆÁøªË®≥„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà„ÅÆ‰æã„Åß„Åô„ÄÇÂÆüÈöõ„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åß„ÅØ„ÄÅ„Åì„Åì„Å´ÊñáÊõ∏„ÅÆÂÆåÂÖ®„Å™ÁøªË®≥ÂÜÖÂÆπ„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ',
    'KO': 'Ïù¥Í≤ÉÏùÄ Î¨∏ÏÑú Î≤àÏó≠ ÏãúÏä§ÌÖúÏùò Í∏∞Îä•ÏùÑ Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌïú Î≤àÏó≠Îêú ÌÖçÏä§Ìä∏Ïùò ÏòàÏûÖÎãàÎã§. Ïã§Ï†ú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏóêÏÑúÎäî Ïó¨Í∏∞Ïóê Î¨∏ÏÑúÏùò ÏôÑÏ†ÑÌïú Î≤àÏó≠Îêú ÎÇ¥Ïö©Ïù¥ ÏûàÏùÑ Í≤ÉÏûÖÎãàÎã§.',
    
    // –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
    'AR': 'Ÿáÿ∞ÿß ŸÖÿ´ÿßŸÑ ÿπŸÑŸâ ÿßŸÑŸÜÿµ ÿßŸÑŸÖÿ™ÿ±ÿ¨ŸÖ ŸÑÿ™Ÿàÿ∂Ÿäÿ≠ Ÿàÿ∏ÿßÿ¶ŸÅ ŸÜÿ∏ÿßŸÖ ÿ™ÿ±ÿ¨ŸÖÿ© ÿßŸÑŸÖÿ≥ÿ™ŸÜÿØÿßÿ™. ŸÅŸä ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ≠ŸÇŸäŸÇŸäÿå ÿ≥ŸäŸÉŸàŸÜ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÖÿ™ÿ±ÿ¨ŸÖ ÿßŸÑŸÉÿßŸÖŸÑ ŸÑŸÑŸÖÿ≥ÿ™ŸÜÿØ ŸáŸÜÿß.',
    'TR': 'Bu, belge √ßeviri sisteminin i≈ülevselliƒüini g√∂stermek i√ßin √ßevrilmi≈ü metnin bir √∂rneƒüidir. Ger√ßek bir uygulamada, belgenin tam √ßevrilmi≈ü i√ßeriƒüi burada olacaktƒ±r.',
    'ID': 'Ini adalah contoh teks yang diterjemahkan untuk mendemonstrasikan fungsionalitas sistem terjemahan dokumen. Dalam aplikasi nyata, konten dokumen yang diterjemahkan lengkap akan berada di sini.'
  };
  
  return demoTexts[langCode] || demoTexts['EN'];
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
 */
function generateFileName(originalFileName, langCode) {
  const nameWithoutExt = originalFileName.replace(/\.[^/.]+$/, "");
  const extension = originalFileName.includes('.') ? 
    originalFileName.substring(originalFileName.lastIndexOf('.')) : '.txt';
  
  const baseName = nameWithoutExt || 'translated_document';
  return `${baseName}_${langCode}${extension}`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Disposition
 */
function buildContentDisposition(fileName) {
  // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const sanitizedFileName = sanitizeFileName(fileName);
  
  // –ö–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
  const encodedFileName = encodeURIComponent(sanitizedFileName);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º RFC 5987 —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
  return `attachment; filename="${sanitizedFileName}"; filename*=UTF-8''${encodedFileName}`;
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
 */
function sanitizeFileName(fileName) {
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
  const sanitized = fileName
    .replace(/[^\x20-\x7E]/g, '_')  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã
    .replace(/[<>:"/\\|?*]/g, '_')  // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ —Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, '_')           // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    .replace(/_{2,}/g, '_')         // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    .replace(/^_+|_+$/g, '')        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .substring(0, 200);             // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  
  // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
  return sanitized || 'document';
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É
 */
function getLanguageName(langCode) {
  const languageNames = {
    'AR': 'Arabic', 'BG': 'Bulgarian', 'CS': 'Czech', 'DA': 'Danish',
    'DE': 'German', 'EL': 'Greek', 'EN': 'English', 'ES': 'Spanish',
    'ET': 'Estonian', 'FI': 'Finnish', 'FR': 'French', 'HU': 'Hungarian',
    'ID': 'Indonesian', 'IT': 'Italian', 'JA': 'Japanese', 'KO': 'Korean',
    'LT': 'Lithuanian', 'LV': 'Latvian', 'NB': 'Norwegian', 'NL': 'Dutch',
    'PL': 'Polish', 'PT': 'Portuguese', 'RO': 'Romanian', 'RU': 'Russian',
    'SK': 'Slovak', 'SL': 'Slovenian', 'SV': 'Swedish', 'TR': 'Turkish',
    'UK': 'Ukrainian', 'ZH': 'Chinese'
  };
  
  return languageNames[langCode] || langCode;
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
async function processDocumentAsync(taskId) {
  const task = processingTasks.get(taskId);
  if (!task) return;

  try {
    console.log(`üìÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${task.fileName}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    task.status = 'processing';
    task.progress = 10;

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await delay(1000);
    const extractedText = await extractTextFromDocument(task.fileId);
    
    task.progress = 20;
    console.log(`üìù –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç: ${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫
    const totalLangs = task.targetLangs.length;
    
    for (let i = 0; i < totalLangs; i++) {
      const langCode = task.targetLangs[i];
      
      console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ ${langCode}...`);
      
      try {
        // –í—ã–∑—ã–≤–∞–µ–º API –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ retry
        console.log(`üìù –ü–µ—Ä–µ–≤–æ–¥–∏–º ${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ ${langCode}`);
        const translatedText = await translateText(
          extractedText, 
          task.sourceLang, 
          langCode,
          RETRY_CONFIG.MAX_RETRIES
        );
        console.log(`üìÑ –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: ${translatedText.length} —Å–∏–º–≤–æ–ª–æ–≤`);

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        const documentId = await createTranslatedDocument(
          translatedText, 
          task.fileName, 
          langCode
        );

        task.results.push({
          langCode,
          status: 'completed',
          documentId,
          translatedText: translatedText,
          downloadUrl: `mock://download/${taskId}/${langCode}`
        });

        console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${langCode} –∑–∞–≤–µ—Ä—à–µ–Ω`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ ${langCode}:`, error);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try {
          console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${langCode}`);
          const fallbackText = await generateDemoTranslatedContent(langCode);
          
          const documentId = await createTranslatedDocument(
            fallbackText, 
            task.fileName, 
            langCode
          );

          task.results.push({
            langCode,
            status: 'completed',
            documentId,
            translatedText: fallbackText,
            downloadUrl: `mock://download/${taskId}/${langCode}`,
            note: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–æ—à–∏–±–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ)'
          });

          console.log(`‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${langCode} —Å–æ–∑–¥–∞–Ω`);
          
        } catch (fallbackError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:`, fallbackError);
          
          task.results.push({
            langCode,
            status: 'error',
            error: `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}. –û—à–∏–±–∫–∞ fallback: ${fallbackError.message}`
          });
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —É—á–µ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
      const progressPerLang = 80 / totalLangs;
      task.progress = 20 + (progressPerLang * (i + 1));
      
      console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Math.round(task.progress)}% (${i + 1}/${totalLangs} —è–∑—ã–∫–æ–≤)`);
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    task.status = 'completed';
    task.progress = 100;
    
    // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const successfulLangs = task.results.filter(r => r.status === 'completed').length;
    const totalErrors = task.results.filter(r => r.status === 'error').length;
    
    console.log(`üéâ –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${task.fileName}`);
    console.log(`   - –¶–µ–ª–µ–≤—ã—Ö —è–∑—ã–∫–æ–≤: ${totalLangs}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${successfulLangs}`);
    console.log(`   - –û—à–∏–±–æ–∫: ${totalErrors}`);
    console.log(`   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successfulLangs / totalLangs) * 100)}%`);

  } catch (error) {
    console.error(`üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:`, error);
    
    task.status = 'error';
    task.error = error.message;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (mock)
 */
async function extractTextFromDocument(fileId) {
  await delay(500);
  
  // Mock –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  return `–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${fileId}. 
–û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. 
–í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ PDF, DOC, DOCX –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞.`;
}

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É DeepL API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
async function translateText(text, sourceLang, targetLang, maxRetries = 5) {
  const originalText = text;
  let lastError = null;
  
  console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL API ${sourceLang} ‚Üí ${targetLang} (–º–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: ${maxRetries})`);
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üì° –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}: –ø–µ—Ä–µ–≤–æ–¥ ${text.length} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ ${targetLang}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ DeepL API, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
      const payload = {
        text: text,
        source_lang: sourceLang === 'AUTO' ? undefined : sourceLang,
        target_lang: targetLang
      };

      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {
        endpoint: 'https://dplx.xi-xu.me/translate',
        textLength: ${text.length},
        targetLang: '${targetLang}'
      }`);

      const response = await fetch('https://dplx.xi-xu.me/translate', {
        method: 'POST',
        body: JSON.stringify(payload),
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      if (!response.ok) {
        const statusText = response.statusText || 'Unknown Error';
        console.error(`API error: ${response.status} ${statusText}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
        if (shouldRetry(response.status) && attempt < maxRetries) {
          const delay = calculateRetryDelay(attempt);
          console.log(`üîÑ –û—à–∏–±–∫–∞ ${response.status}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries})`);
          await sleep(delay);
          lastError = new Error(`HTTP ${response.status}: ${statusText}`);
          continue;
        }
        
        throw new Error(`HTTP ${response.status}: ${statusText}`);
      }

      const result = await response.json();

      if (result.code === 200 && result.data) {
        console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL API ${sourceLang} ‚Üí ${targetLang} —É—Å–ø–µ—à–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return result.data;
      } else {
        const errorMsg = result.message || result.error || 'API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É';
        console.error(`API response error: ${errorMsg}`);
        
        if (attempt < maxRetries) {
          const delay = calculateRetryDelay(attempt);
          console.log(`üîÑ –û—à–∏–±–∫–∞ API, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries})`);
          await sleep(delay);
          lastError = new Error(errorMsg);
          continue;
        }
        
        throw new Error(errorMsg);
      }

    } catch (error) {
      lastError = error;
      console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
      
      if (attempt < maxRetries && shouldRetryError(error)) {
        const delay = calculateRetryDelay(attempt);
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
        await sleep(delay);
        continue;
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
      break;
    }
  }
  
  // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
  console.error(`üö´ –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è ${targetLang}`);
  console.error(`üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "${originalText.substring(0, 100)}..."`);
  console.error(`üí• –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError?.message}`);
  
  // Fallback –Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${targetLang}`);
  return await generateDemoTranslatedContent(targetLang);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –¥–∞–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–≤–µ—Ç–∞
 */
function shouldRetry(statusCode) {
  // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö
  const retryableStatuses = [
    408, // Request Timeout
    429, // Too Many Requests
    500, // Internal Server Error
    502, // Bad Gateway
    503, // Service Unavailable
    504, // Gateway Timeout
    520, // Unknown Error (Cloudflare)
    521, // Web Server Is Down (Cloudflare)
    522, // Connection Timed Out (Cloudflare)
    523, // Origin Is Unreachable (Cloudflare)
    524, // A Timeout Occurred (Cloudflare)
  ];
  
  return retryableStatuses.includes(statusCode);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
 */
function shouldRetryError(error) {
  const retryableErrors = [
    'ECONNRESET',
    'ETIMEDOUT', 
    'ENOTFOUND',
    'EAI_AGAIN',
    'ECONNREFUSED'
  ];
  
  return retryableErrors.some(code => error.message.includes(code)) ||
         error.message.includes('timeout') ||
         error.message.includes('network');
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è)
 */
function calculateRetryDelay(attempt) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
  const baseDelay = RETRY_CONFIG.BASE_DELAY;
  const maxDelay = RETRY_CONFIG.MAX_DELAY;
  
  // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1—Å–µ–∫, 2—Å–µ–∫, 4—Å–µ–∫, 8—Å–µ–∫, 16—Å–µ–∫
  let delay = baseDelay * Math.pow(2, attempt - 1);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–∂–∏—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
  const jitter = Math.random() * 0.3 * delay; // ¬±30% –¥–∂–∏—Ç—Ç–µ—Ä
  delay = delay + jitter;
  
  return Math.min(delay, maxDelay);
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (mock)
 */
async function createTranslatedDocument(translatedText, originalFileName, langCode) {
  await delay(200);
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const documentId = `doc_${langCode}_${Math.random().toString(36).substr(2, 12)}`;
  
  console.log(`üìÑ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç ${documentId} –¥–ª—è —è–∑—ã–∫–∞ ${langCode}`);
  
  return documentId;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
 */
export function cleanupOldTasks() {
  const now = Date.now();
  const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

  for (const [taskId, task] of processingTasks.entries()) {
    if (now - task.createdAt > maxAge) {
      processingTasks.delete(taskId);
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞: ${taskId}`);
    }
  }
}
