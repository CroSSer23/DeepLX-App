/**
 * Telegram Bot Authentication API
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
 * 
 * @author crosser.software
 * @version 2.0.0
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN,
  ADMIN_CHAT_ID: process.env.TELEGRAM_ADMIN_CHAT_ID,
  WEBHOOK_SECRET: process.env.TELEGRAM_WEBHOOK_SECRET,
  SESSION_TIMEOUT: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–≤ production —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const sessions = new Map();
const pendingApprovals = new Map();

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export default async function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { action } = req.query;

  try {
    switch (action) {
      case 'start':
        return handleAuthStart(req, res);
      case 'check':
        return handleAuthCheck(req, res);
      case 'webhook':
        return handleTelegramWebhook(req, res);
      default:
        return res.status(400).json({
          error: 'Invalid action',
          message: 'Supported actions: start, check, webhook'
        });
    }
  } catch (error) {
    console.error('Auth API error:', error);
    return res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function handleAuthStart(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–µ—Å—Å–∏–∏
  const sessionId = generateSessionId();
  const authCode = generateAuthCode();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
  sessions.set(sessionId, {
    authCode,
    status: 'pending',
    createdAt: Date.now(),
    userInfo: null
  });

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
  cleanupExpiredSessions();

  console.log(`üîë –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${sessionId}, –∫–æ–¥: ${authCode}`);

  return res.status(200).json({
    sessionId,
    authCode,
    botUsername: 'crosserdeepl_bot', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    message: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function handleAuthCheck(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { sessionId } = req.query;

  if (!sessionId) {
    return res.status(400).json({
      error: 'Missing sessionId',
      message: 'sessionId –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    });
  }

  const session = sessions.get(sessionId);

  if (!session) {
    return res.status(404).json({
      error: 'Session not found',
      message: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
  if (Date.now() - session.createdAt > CONFIG.SESSION_TIMEOUT) {
    sessions.delete(sessionId);
    return res.status(410).json({
      error: 'Session expired',
      message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'
    });
  }

  return res.status(200).json({
    status: session.status,
    userInfo: session.userInfo,
    message: getStatusMessage(session.status)
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram –±–æ—Ç–∞
 */
async function handleTelegramWebhook(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const update = req.body;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
  if (update.callback_query) {
    return handleCallbackQuery(update.callback_query, res);
  }

  if (!update.message) {
    return res.status(200).json({ ok: true });
  }

  const message = update.message;
  const chatId = message.chat.id;
  const text = message.text;
  const user = message.from;

  console.log(`üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.first_name} (${user.id}): ${text}`);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text === '/start') {
    await sendTelegramMessage(chatId, 
      '–ü—Ä–∏–≤–µ—Ç! üëã\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞ TranslateAI –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n' +
      '–ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: ABC123'
    );
    return res.status(200).json({ ok: true });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authCode = text.trim().toUpperCase();
  const session = findSessionByAuthCode(authCode);

  if (session) {
    const sessionId = [...sessions.entries()]
      .find(([, s]) => s.authCode === authCode)?.[0];

    if (sessionId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      session.userInfo = {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        username: user.username
      };
      session.status = 'pending_approval';

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∫–æ–¥ ${authCode}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendTelegramMessage(chatId,
        '‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n' +
        '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ. ' +
        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.'
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
      await sendAdminApprovalRequest(sessionId, session);

      return res.status(200).json({ ok: true });
    }
  }

  // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
  await sendTelegramMessage(chatId,
    '‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n\n' +
    '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞.'
  );

  return res.status(200).json({ ok: true });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramMessage(chatId, text, replyMarkup = null) {
  if (!CONFIG.BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };

    if (replyMarkup) {
      payload.reply_markup = replyMarkup;
    }

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries –æ—Ç inline –∫–Ω–æ–ø–æ–∫
 */
async function handleCallbackQuery(callbackQuery, res) {
  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;

  console.log(`üîò –ü–æ–ª—É—á–µ–Ω callback: ${data} –æ—Ç —á–∞—Ç–∞ ${chatId}`);

  try {
    if (data.startsWith('approve_')) {
      const sessionId = data.replace('approve_', '');
      await handleApproval(sessionId, true, chatId, messageId);
    } else if (data.startsWith('reject_')) {
      const sessionId = data.replace('reject_', '');
      await handleApproval(sessionId, false, chatId, messageId);
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await answerCallbackQuery(callbackQuery.id);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    await answerCallbackQuery(callbackQuery.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }

  return res.status(200).json({ ok: true });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleApproval(sessionId, approved, chatId, messageId) {
  const session = sessions.get(sessionId);
  
  if (!session) {
    console.log(`‚ùå –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return;
  }

  session.status = approved ? 'approved' : 'rejected';
  
  const user = session.userInfo;
  const statusText = approved ? '‚úÖ –û–î–û–ë–†–ï–ù' : '‚ùå –û–¢–ö–õ–û–ù–ï–ù';
  const statusEmoji = approved ? '‚úÖ' : '‚ùå';

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
  const updatedText = 
    `üîê <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ TranslateAI</b> - <b>${statusText}</b>\n\n` +
    `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.firstName} ${user.lastName || ''}\n` +
    `üÜî <b>ID:</b> ${user.id}\n` +
    `üì± <b>Username:</b> @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
    `${statusEmoji} <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}`;

  await editTelegramMessage(chatId, messageId, updatedText);

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (approved) {
    await sendTelegramMessage(user.id,
      'üéâ <b>–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n' +
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TranslateAI! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n' +
      '–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.'
    );
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} (${user.id}) –æ–¥–æ–±—Ä–µ–Ω`);
  } else {
    await sendTelegramMessage(user.id,
      '‚ùå <b>–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n' +
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ TranslateAI –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n' +
      '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} (${user.id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
  }
}

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query
 */
async function answerCallbackQuery(callbackQueryId, text = '') {
  if (!CONFIG.BOT_TOKEN) return;

  try {
    const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/answerCallbackQuery`;
    const payload = {
      callback_query_id: callbackQueryId,
      text: text
    };

    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error);
  }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
async function editTelegramMessage(chatId, messageId, text) {
  if (!CONFIG.BOT_TOKEN) return;

  try {
    const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/editMessageText`;
    const payload = {
      chat_id: chatId,
      message_id: messageId,
      text: text,
      parse_mode: 'HTML'
    };

    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function sendAdminApprovalRequest(sessionId, session) {
  if (!CONFIG.ADMIN_CHAT_ID) {
    console.error('‚ùå TELEGRAM_ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  const user = session.userInfo;
  const text = 
    `üîê <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ TranslateAI</b>\n\n` +
    `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.firstName} ${user.lastName || ''}\n` +
    `üÜî <b>ID:</b> ${user.id}\n` +
    `üì± <b>Username:</b> @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
    `–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø?`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å', callback_data: `approve_${sessionId}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${sessionId}` }
      ]
    ]
  };

  await sendTelegramMessage(CONFIG.ADMIN_CHAT_ID, text, keyboard);
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function generateSessionId() {
  return 'sess_' + Math.random().toString(36).substr(2, 16);
}

function generateAuthCode() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

function findSessionByAuthCode(authCode) {
  for (const session of sessions.values()) {
    if (session.authCode === authCode && session.status === 'pending') {
      return session;
    }
  }
  return null;
}

function cleanupExpiredSessions() {
  const now = Date.now();
  for (const [sessionId, session] of sessions.entries()) {
    if (now - session.createdAt > CONFIG.SESSION_TIMEOUT) {
      sessions.delete(sessionId);
    }
  }
}

function getStatusMessage(status) {
  switch (status) {
    case 'pending':
      return '–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram –±–æ—Ç–µ';
    case 'pending_approval':
      return '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞';
    case 'approved':
      return '–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω';
    case 'rejected':
      return '–î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
  }
}
